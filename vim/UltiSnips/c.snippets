global !p

from snippet_helpers import *

endglobal

snippet fdoxy
/**
 * @file	${1:`!p snip.rv = snip.fn or "filename"`}
 * @brief	$0
 * @author	Kacper Kowalski - $2
 */
endsnippet

snippet fdoxydefgroup "Doxygen defgroup tag"
/**
 * @defgroup $1	$2
 * @brief $3
 * @{
 */
$4
/** @} */ // End of group $1
endsnippet

snippet muftest
MU_TEST($1)
{
    $0
}

MU_TEST_SUITE($2)
{
    MU_RUN_TEST($1);
}

void ${3:`!v vim_snippets#Filename('$1', 'title')`}()
{
    MU_RUN_SUITE($2);
    MU_REPORT();
}
endsnippet

snippet iguard "Include header once only guard"
#ifndef ${2:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('%s' % (name)).upper()
else:
	snip.rv = snip.c`}
#define $2

${VISUAL}$1$0

#endif /* $2 */
endsnippet

snippet fornobr "For without brackets"
for (int ${2:i} = 0; $2 < ${1:count}; ${3:++}$2)
	${4}
endsnippet

snippet foru "The proper for loop"
for (${1:unsigned} ${2:i}{${3:0}}; $2 < ${4:count}; ${5:++}$2)
{
    $0
}
endsnippet

snippet fcommentruler "Comment rulers used to separate code"
// --------------------------------------------------------------------------------------------------------------------
// $0
// --------------------------------------------------------------------------------------------------------------------
endsnippet

snippet cfiletemplate
/**
 * @file	${1:`!p snip.rv = snip.fn or "filename"`}
 * @brief	$2
 * @author	Kacper Kowalski - $3
 */
$0
// --------------------------------------------------------------------------------------------------------------------
// DEFINITIONS OF STRUCTURES, DATA TYPES, ...
// --------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------
// DECLARATION OF PRIVATE FUNCTIONS AND VARIABLES
// --------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------
// DEFINITION OF PUBLIC FUNCTIONS AND VARIABLES
// --------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------
// DEFINITION OF PRIVATE FUNCTIONS
// --------------------------------------------------------------------------------------------------------------------

endsnippet

snippet hfiletemplate
/**
 * @file	${1:`!p snip.rv = snip.fn or "filename"`}
 * @brief	$3
 * @author	Kacper Kowalski - $4
 */

#ifndef ${2:`!p
if not snip.c:
	import string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('%s' % (name)).upper()
else:
	snip.rv = snip.c`}
#define $2

${VISUAL}$0

#endif /* $2 */
endsnippet

snippet hppfiletemplate "Template for header file"
/**
 * @file        `!p snip.rv = fn`
 * @brief       $1
 * @author      Kacper Kowalski - $2
 */
#ifndef `!p snip.rv = to_include_guard(fn)`
#define `!p snip.rv = to_include_guard(fn)`

class $3
{
  public:
    explicit $3($4);
    $0

  private:

};

#endif /* `!p snip.rv = to_include_guard(fn)` */
endsnippet

snippet ifacefiletemplate "Template for header file defining an interface"
/**
 * @file        `!p snip.rv = fn`
 * @brief       $1
 * @author      Kacper Kowalski - $2
 */
#ifndef `!p snip.rv = to_include_guard(fn)`
#define `!p snip.rv = to_include_guard(fn)`

struct $3
{
    $0
    virtual ~$3() = default;
};

#endif /* `!p snip.rv = to_include_guard(fn)` */
endsnippet

snippet ifacefun "Interface function definition (abstract method)"
virtual $2 $1($3) = 0;
endsnippet

snippet unitytestfile "Unity test file"
/**
 * @file        `!p snip.rv = fn`
 * @brief       $1
 * @author      Kacper Kowalski - $2
 */
#include "unity.h"

// --------------------------------------------------------------------------------------------------------------------
// Test cases declaration
// --------------------------------------------------------------------------------------------------------------------
/**
 * @defgroup ${3:`!p snip.rv = test_file_name_to_pretty_pascal_case(fn) + 'Tests'`}
 * @{
 */
$0

/** @} */ // End of group $3

// --------------------------------------------------------------------------------------------------------------------
// Helpers
// --------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------
// Test cases definition
// --------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------
// Runner
// --------------------------------------------------------------------------------------------------------------------
int test_`!p snip.rv = test_file_name_to_pretty(fn)`()
{
    UNITY_BEGIN();


    return UNITY_END();
}
endsnippet

snippet freertos_inc_task
#include "FreeRTOS.h"
#include "task.h"
$0
endsnippet

snippet privatecfunction
static void $1();
static void $1()
{
}
endsnippet

snippet dynks_iot_creds
#ifdef $1
#define IOT_SERVER_HOSTNAME "$2$3"
#define URI_PATH1 "v1"
#define URI_PATH2 "$4"
#define URI_PATH3 "data"
#define TENANT "$2"
#define ID "$5"
#endif /* $1 */
$0
endsnippet

snippet dynks_impulse_cnt_test_data

// --------------------------------------------------------------------------------------------------------------------
// $0
// --------------------------------------------------------------------------------------------------------------------

const float_type $1_x [] = {

};

const float_type $1_y [] = {

};

const float_type $1_z [] = {

};

const struct impulse_cnt_test_struct $1 = {
	.x = $1_x,
	.y = $1_y,
	.z = $1_z,
	.size = array_len($1_x),
    .num_impulses_in_signal = $2};

endsnippet

snippet dynks_impulse_cnt_test_data_no_xyz_arrays

// --------------------------------------------------------------------------------------------------------------------
// $3
// --------------------------------------------------------------------------------------------------------------------

$0

const struct impulse_cnt_test_struct $1 = {
	.x = $1_x,
	.y = $1_y,
	.z = $1_z,
	.size = array_len($1_x),
    .num_impulses_in_signal = $2};

endsnippet

snippet frtos_cpp_file
/**
 * @file	${1:`!v vim_snippets#Filename('$1')`}.cpp
 * @brief	$2
 * @author	Kacper Kowalski - $3
 */
#include "FreeRTOS.h"
#include "task.h"

// --------------------------------------------------------------------------------------------------------------------
// DEFINITIONS OF STRUCTURES, DATA TYPES, ...
// --------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------
// DECLARATION OF PRIVATE FUNCTIONS AND VARIABLES
// --------------------------------------------------------------------------------------------------------------------
static void $1_task(void *);

// --------------------------------------------------------------------------------------------------------------------
// DEFINITION OF PUBLIC FUNCTIONS AND VARIABLES
// --------------------------------------------------------------------------------------------------------------------
extern "C" void init_$1()
{
    xTaskCreate($1_task, "$1", 256, NULL, 1, NULL);
}

// --------------------------------------------------------------------------------------------------------------------
// DEFINITION OF PRIVATE FUNCTIONS
// --------------------------------------------------------------------------------------------------------------------
static void $1_task(void *)
{
    $0
    for(;;)
    {
    }
}
endsnippet

snippet frtos_c_file
/**
 * @file	${1:`!v vim_snippets#Filename('$1')`}.c
 * @brief	$2
 * @author	Kacper Kowalski - $3
 */
#include "FreeRTOS.h"
#include "task.h"

// --------------------------------------------------------------------------------------------------------------------
// DEFINITIONS OF STRUCTURES, DATA TYPES, ...
// --------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------
// DECLARATION OF PRIVATE FUNCTIONS AND VARIABLES
// --------------------------------------------------------------------------------------------------------------------
static void $1_task(void *params);

// --------------------------------------------------------------------------------------------------------------------
// DEFINITION OF PUBLIC FUNCTIONS AND VARIABLES
// --------------------------------------------------------------------------------------------------------------------
void init_$1()
{
    xTaskCreate($1_task, "$1", 256, NULL, 1, NULL);
}

// --------------------------------------------------------------------------------------------------------------------
// DEFINITION OF PRIVATE FUNCTIONS
// --------------------------------------------------------------------------------------------------------------------
static void $1_task(void *params)
{
    $0
    for(;;)
    {
    }
    (void) params;
}
endsnippet

snippet maillerta
kacper.kowalski@etteplan.com
endsnippet

snippet mailette
kacper.kowalski@etteplan.com
endsnippet

snippet mailprivate
kacper.s.kowalski@gmail.com
endsnippet

snippet mailhum
kacper.kowalski@hum-systems.com
endsnippet

snippet cppalgo
std::$1(std::begin($2), std::end($2), $0);
endsnippet

snippet cppnonmovable
$1(const $1 &) = default;
$1 &operator=(const $1 &) = default;
$1($1 &&) = delete;
$1 &operator=($1 &&) = delete;
endsnippet

snippet cppnonmovable-noncopyable
$1(const $1 &) = delete;
$1 &operator=(const $1 &) = delete;
$1($1 &&) = delete;
$1 &operator=($1 &&) = delete;
endsnippet

snippet iface "C++ interface"
struct $1
{
    $0
    virtual ~$1() = default;
};
endsnippet

snippet clas "C++ class"
class $1
{
  public:
    explicit $1($2)$0

  private:
};
endsnippet

snippet ctor "Class constructor" "True" e
${1:explicit} `!p snip.rv = get_class_name_from_few_previous_lines(snip.buffer, vim.current.window.cursor[0])`($2) $0
endsnippet

snippet catch2testfile "Catch2 test file template"
/**
 * @file        `!p snip.rv = fn`
 * @brief       $1
 * @author      Kacper Kowalski - $2
 */
#include <catch2/catch_test_macros.hpp>

TEST_CASE("$3", "[$4]")
{
    $0
}
endsnippet

snippet cbanner "Banner for code section"
/* ------------------------------------- $1 `!p snip.rv = '-' * (74 - len(t[1]))` */
$0
endsnippet
